{
    "decks": [
      {
        "id": 1,
        "name": "Object oriented Programming(OOP)",
        "cards": [
          { "id": 101, "question": "What is a compiler?", "answer": "A tool that translates source code into executable code." },
          { "id": 102, "question": "Define 'algorithm'.", "answer": "A step-by-step procedure to solve a problem or accomplish a task." },
          { "id": 103, "question": "What is a pointer in C++?", "answer": "A variable that stores the memory address of another variable." },
          { "id": 104, "question": "Name a strongly typed language.", "answer": "C++, Rust, Java, etc." },
          { "id": 105, "question": "What is OOP?", "answer": "Object-Oriented Programming, a paradigm based on objects and classes." },
          { "id": 106, "question": "Explain 'encapsulation'.", "answer": "Bundling data and methods into a single unit (class), restricting direct access." },
          { "id": 107, "question": "What does 'API' stand for?", "answer": "Application Programming Interface." },
          { "id": 108, "question": "What is 'inheritance' in OOP?", "answer": "A mechanism where a class acquires properties and behaviors from another class." },
          { "id": 109, "question": "What is a 'for' loop used for?", "answer": "Iterating a set number of times or over a container's elements." },
          { "id": 110, "question": "What is a 'while' loop used for?", "answer": "Repeatedly executing code as long as a condition is true." },
          { "id": 111, "question": "Explain 'recursion'.", "answer": "A function that calls itself to solve a smaller instance of the same problem." },
          { "id": 112, "question": "Name a popular version control system.", "answer": "Git is commonly used for tracking changes in code." },
          { "id": 113, "question": "Explain 'polymorphism'.", "answer": "Ability of a function/method to handle objects of different types." },
          { "id": 114, "question": "What is 'composition' in OOP?", "answer": "A class that contains objects of other classes as members." },
          { "id": 115, "question": "Name a dynamic container in C++.", "answer": "std::vector is a dynamically resizable array in C++." },
          { "id": 116, "question": "Explain 'function overloading'.", "answer": "Defining multiple functions with the same name but different parameters." },
          { "id": 117, "question": "What does 'const' do in C++?", "answer": "Specifies that a variable or method parameter cannot be modified." },
          { "id": 118, "question": "Define 'abstraction' in OOP.", "answer": "Hiding complex implementation details behind a simple interface." },
          { "id": 119, "question": "What is 'RAII'?", "answer": "Resource Acquisition Is Initialization - managing resources via object lifetimes." },
          { "id": 120, "question": "What does 'STL' stand for?", "answer": "Standard Template Library in C++." },
          { "id": 121, "question": "Name a feature introduced in C++11.", "answer": "auto keyword, range-based for loops, smart pointers, etc." },
          { "id": 122, "question": "What is 'nullptr'?", "answer": "A keyword representing the null pointer (replaces NULL macros)." },
          { "id": 123, "question": "Explain 'lambda expression'.", "answer": "An anonymous function defined with the [] capture list syntax." },
          { "id": 124, "question": "What is 'encapsulation' again?", "answer": "Wrapping data and methods into a class to protect internal data." },
          { "id": 125, "question": "Explain 'master branch' in Git.", "answer": "The main branch where production-ready code is usually merged." },
          { "id": 126, "question": "What is 'header file' in C++?", "answer": "A file with declarations (classes, functions) included by other source files." },
          { "id": 127, "question": "What is a 'constructor' in a class?", "answer": "A special function to initialize object state upon creation." },
          { "id": 128, "question": "Define 'destructor' in C++.", "answer": "A special function called when an object goes out of scope." },
          { "id": 129, "question": "What does 'sudo' do in Linux?", "answer": "Executes a command with superuser privileges." },
          { "id": 130, "question": "Explain 'pass by value'.", "answer": "Parameters receive a copy of arguments passed to a function." },
          { "id": 131, "question": "Explain 'pass by reference'.", "answer": "Parameters refer to the original argument, not a copy." },
          { "id": 132, "question": "What is 'GitHub'?", "answer": "A platform for hosting and collaborating on Git repositories." },
          { "id": 133, "question": "Explain 'operator overloading'.", "answer": "Defining new behaviors for operators (+, -, etc.) for custom classes." },
          { "id": 134, "question": "What is 'Flask' in Python?", "answer": "A lightweight web framework for Python." },
          { "id": 135, "question": "Explain 'merge conflict' in Git.", "answer": "When changes from different commits overlap, requiring manual resolution." },
          { "id": 136, "question": "Name a container adapter in C++.", "answer": "std::stack, std::queue, or std::priority_queue." },
          { "id": 137, "question": "What is 'smart pointer'?", "answer": "C++ pointer-like object that automatically manages dynamic memory." },
          { "id": 138, "question": "Define 'constexpr'.", "answer": "Specifies that a value can be evaluated at compile time if possible." },
          { "id": 139, "question": "What is the purpose of a 'makefile'?", "answer": "Automates the build process, specifying how to compile/link." },
          { "id": 140, "question": "Explain 'static_cast'.", "answer": "Compile-time cast used to convert between related types." },
          { "id": 141, "question": "What is 'dynamic_cast' for?", "answer": "Safely casting within an inheritance hierarchy at runtime." },
          { "id": 142, "question": "Explain 'short-circuit evaluation'.", "answer": "Logical expressions stop evaluating when the result is known." },
          { "id": 143, "question": "Name a concurrency tool in C++11.", "answer": "std::thread, std::mutex, std::lock_guard, etc." },
          { "id": 144, "question": "Define 'tail recursion'.", "answer": "A recursive call is the last operation in a function, allowing optimization." },
          { "id": 145, "question": "What is 'virtual destructor'?", "answer": "A destructor declared virtual ensures proper cleanup in polymorphic classes." },
          { "id": 146, "question": "What's the difference between '++i' and 'i++'?", "answer": "++i increments before returning; i++ returns then increments." },
          { "id": 147, "question": "Name a standard library algorithm function.", "answer": "std::sort, std::find, std::accumulate, etc." },
          { "id": 148, "question": "What is 'Docker'?", "answer": "A tool for creating, deploying, and running containers." },
          { "id": 149, "question": "Explain 'branch' in Git.", "answer": "A separate line of development in a repository." },
          { "id": 150, "question": "Define 'CI/CD'.", "answer": "Continuous Integration & Continuous Deployment for automated builds/tests." }
        ]
      }
    ]
  }